type HttpProblem = {
  /**
   * A URI reference that identifies the problem type. This
   * can be an HTTP URL or any other URI.
   */
  type: string
  /**
   * A short, human-readable summary of the problem type. It should
   * not change based on the occurrence of the problem.
   */
  title: string
  /**
   * The HTTP status code generated by the origin server for
   * this occurrence of the problem.
   */
  status: number
  /**
   * A human-readable explanation specific to this occurrence
   * of the problem.
   */
  detail?: string
  /**
   * A URI reference that identifies the specific occurrence of
   * the problem. It may or may not yield further information if
   * dereferenced.
   */
  instance?: string
  /**
   * Additional members to include information about the
   * problem or links to other resources.
   */
  extensions?: Record<string, unknown>
}

export const HTTP_PROBLEM_URN_PREFIX = 'urn:problem:'

export const BAD_REQUEST: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'bad-request',
  title: 'Bad Request',
  status: 400,
  detail:
    'The server could not understand the request due to invalid syntax or other client error.',
}

export const UNAUTHORIZED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'unauthorized',
  title: 'Unauthorized',
  status: 401,
  detail: 'Authentication is required and has failed or not been provided.',
}

export const PAYMENT_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'payment-required',
  title: 'Payment Required',
  status: 402,
  detail:
    'Payment is required for access to the requested resource. Please ensure that the necessary payment has been made.',
}

export const FORBIDDEN: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'forbidden',
  title: 'Forbidden',
  status: 403,
  detail: 'Access to the requested resource is forbidden.',
}

export const NOT_FOUND: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'not-found',
  title: 'Not Found',
  status: 404,
  detail: 'The requested resource could not be found but may be available in the future.',
}

export const METHOD_NOT_ALLOWED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'method-not-allowed',
  title: 'Method Not Allowed',
  status: 405,
  detail:
    'The method specified in the request is not allowed for the resource identified by the request URI.',
}

export const NOT_ACCEPTABLE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'not-acceptable',
  title: 'Not Acceptable',
  status: 406,
  detail:
    'The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.',
}

export const PROXY_AUTHENTICATION_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'proxy-authentication-required',
  title: 'Proxy Authentication Required',
  status: 407,
  detail: 'The client must first authenticate itself with the proxy.',
}

export const REQUEST_TIMEOUT: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'request-timeout',
  title: 'Request Timeout',
  status: 408,
  detail: 'The server timed out waiting for the request.',
}

export const CONFLICT: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'conflict',
  title: 'Conflict',
  status: 409,
  detail:
    'The request could not be completed due to a conflict with the current state of the resource.',
}

export const GONE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'gone',
  title: 'Gone',
  status: 410,
  detail: 'The resource requested is no longer available and will not be available again.',
}

export const LENGTH_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'length-required',
  title: 'Length Required',
  status: 411,
  detail:
    'The request did not specify the length of its content, which is required by the requested resource.',
}

export const PRECONDITION_FAILED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'precondition-failed',
  title: 'Precondition Failed',
  status: 412,
  detail:
    'The server does not meet one of the preconditions that the requester put on the request.',
}

export const PAYLOAD_TOO_LARGE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'payload-too-large',
  title: 'Payload Too Large',
  status: 413,
  detail: 'The request is larger than the server is willing or able to process.',
}

export const URI_TOO_LONG: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'uri-too-long',
  title: 'URI Too Long',
  status: 414,
  detail: 'The URI provided was too long for the server to process.',
}

export const UNSUPPORTED_MEDIA_TYPE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'unsupported-media-type',
  title: 'Unsupported Media Type',
  status: 415,
  detail: 'The server does not support the media type or the representation of the resource.',
}

export const RANGE_NOT_SATISFIABLE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'range-not-satisfiable',
  title: 'Range Not Satisfiable',
  status: 416,
  detail: 'The server cannot supply the portion of the file requested by the client.',
}

export const EXPECTATION_FAILED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'expectation-failed',
  title: 'Expectation Failed',
  status: 417,
  detail: 'The server cannot meet the requirements of the Expect request-header field.',
}

export const IM_A_TEAPOT: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'im-a-teapot',
  title: "I'm a teapot",
  status: 418,
  detail: 'The server refuses to brew coffee because it is a teapot.',
}

export const MISDIRECTED_REQUEST: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'misdirected-request',
  title: 'Misdirected Request',
  status: 421,
  detail: 'The request was directed at a server that is not able to produce a response.',
}

export const UNPROCESSABLE_ENTITY: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'unprocessable-entity',
  title: 'Unprocessable Entity',
  status: 422,
  detail:
    'The server understands the request, but it cannot process the provided data due to semantic errors.',
}

export const LOCKED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'locked',
  title: 'Locked',
  status: 423,
  detail: 'The resource that is being accessed is locked.',
}

export const FAILED_DEPENDENCY: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'failed-dependency',
  title: 'Failed Dependency',
  status: 424,
  detail: 'The request failed due to failure of a previous request.',
}

export const TOO_EARLY: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'too-early',
  title: 'Too Early',
  status: 425,
  detail: 'The server is unwilling to risk processing a request that might be replayed.',
}

export const UPGRADE_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'upgrade-required',
  title: 'Upgrade Required',
  status: 426,
  detail: 'The client should switch to a different protocol such as TLS/1.0.',
}

export const PRECONDITION_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'precondition-required',
  title: 'Precondition Required',
  status: 428,
  detail: 'The server requires the request to be conditional.',
}

export const TOO_MANY_REQUESTS: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'too-many-requests',
  title: 'Too Many Requests',
  status: 429,
  detail: 'The user has sent too many requests in a given amount of time ("rate limiting").',
}

export const REQUEST_HEADER_FIELDS_TOO_LARGE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'request-header-fields-too-large',
  title: 'Request Header Fields Too Large',
  status: 431,
  detail: 'The server is unwilling to process the request because its header fields are too large.',
}

export const UNAVAILABLE_FOR_LEGAL_REASONS: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'unavailable-for-legal-reasons',
  title: 'Unavailable For Legal Reasons',
  status: 451,
  detail: 'The server is denying access to the resource as a consequence of a legal demand.',
}

export const INTERNAL_SERVER_ERROR: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'internal-server-error',
  title: 'Internal Server Error',
  status: 500,
  detail: 'There was an error handling the request.',
}

export const NOT_IMPLEMENTED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'not-implemented',
  title: 'Not Implemented',
  status: 501,
  detail: 'The server does not support the functionality required to fulfill the request.',
}

export const BAD_GATEWAY: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'bad-gateway',
  title: 'Bad Gateway',
  status: 502,
  detail:
    'The server received an invalid response from an upstream server while attempting to fulfill the request.',
}

export const SERVICE_UNAVAILABLE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'service-unavailable',
  title: 'Service Unavailable',
  status: 503,
  detail:
    'The server is currently unable to handle the request due to temporary overloading or maintenance of the server.',
}

export const GATEWAY_TIMEOUT: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'gateway-timeout',
  title: 'Gateway Timeout',
  status: 504,
  detail:
    'The server did not receive a timely response from an upstream server it accessed while attempting to complete the request.',
}

export const HTTP_VERSION_NOT_SUPPORTED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'http-version-not-supported',
  title: 'HTTP Version Not Supported',
  status: 505,
  detail: 'The server does not support the HTTP protocol version used in the request.',
}

export const VARIANT_ALSO_NEGOTIATES: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'variant-also-negotiates',
  title: 'Variant Also Negotiates',
  status: 506,
  detail: 'Transparent content negotiation for the request results in a circular reference.',
}

export const INSUFFICIENT_STORAGE: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'insufficient-storage',
  title: 'Insufficient Storage',
  status: 507,
  detail: 'The server is unable to store the representation needed to complete the request.',
}

export const LOOP_DETECTED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'loop-detected',
  title: 'Loop Detected',
  status: 508,
  detail: 'The server detected an infinite loop while processing the request.',
}

export const NOT_EXTENDED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'not-extended',
  title: 'Not Extended',
  status: 510,
  detail: 'Further extensions to the request are required for the server to fulfill it.',
}

export const NETWORK_AUTHENTICATION_REQUIRED: HttpProblem = {
  type: HTTP_PROBLEM_URN_PREFIX + 'network-authentication-required',
  title: 'Network Authentication Required',
  status: 511,
  detail: 'The client needs to authenticate to gain network access.',
}

export default HttpProblem
